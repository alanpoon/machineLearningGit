summary(poissonInsectSpray)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
>knots<- c(0)
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-host))
xMat<-cbind(1,x,splineTerms)
linearModel<-lm(y~xMat-1)
yhat<-predict(linearModel)
knots<- c(0)
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-host))
xMat<-cbind(1,x,splineTerms)
linearModel<-lm(y~xMat-1)
yhat<-predict(linearModel)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots, function(knot)(x > knot)*(x - knot))
xMat<-cbind(1,x,splineTerms)
linearModel <- lm(y~xMat-1)
yhat<-predict(linearModel)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
yhat
summary(linearModel)
head(mtcars,2)
head(mtcars,10)
```{r}
x<-mtcars$am
y<-mtcars$mpg
lmfit<-lm(y~x)
summary(lmfit)
require(stats)
require(graphics)
pairs(mtcars,panel=panel.smooth,main="mtcars data")
summary(lm(mpg~.,data=mtcars))$coefficients
library(kernlab)
install.packages("kernlab")
head(spam,2)
data(spam)
library(kernlab)
data(spam)
head(spam\,2)
head(spam,2)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease,2)
data(AlzheimerDisease)
head(AlzheimerDisease,2)
data(AlzheimerDisease)
diagnosis
library("caret", lib.loc="~/R/win-library/3.1")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library("caret", lib.loc="~/R/win-library/3.1")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
library(caret)
install.packages("lme4")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
AlzheimerDisease
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
library("lme4", lib.loc="~/R/win-library/3.1")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data(AlzheimerDisease)
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
data(AlzheimerDisease)
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
View(trainIndex)
View(trainIndex)
head(AlzheimerDisease,2)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library("Hmisc", lib.loc="~/R/win-library/3.1")
View(mixtures)
cutStr<-cut2(mixtures$CompressiveStrength,g=3)
table(cutStr)
head(mixtures,2)
rownames(mixtures)
cutIndex<-cut2(rownames(mixtures),g=3)
mixtures$index
mixtures$Index
cutIndex<-cut2(mixtures,g=3)
head(mixtures,2)
cutAge<-cut2(mixtures$Age,g=3)
pl<-qplot(cutAge,CompressiveStrength)
pl
pl<-qplot(cutAge,CompressiveStrength,data=training,fill=cutAge,geom=c('boxplot'))
pl
cutAge<-cut2(mixtures$Age,g=3)
cutStr<-cut2(mixtures$CompressiveStrength,g=3)
pl<-qplot(cutAge,CompressiveStrength,data=training,fill=cutAge,geom=c('boxplot'))
pl
y<-mixtures$CompressiveStrength
cutAge<-cut2(mixtures$Age,g=3)
cutStr<-cut2(mixtures$CompressiveStrength,g=3)
pl<-qplot(cutAge,CompressiveStrength,data=training,fill=cutAge,geom=c('boxplot'))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
y<-mixtures$CompressiveStrength
cutAge<-cut2(mixtures$Age,g=3)
cutStr<-cut2(mixtures$CompressiveStrength,g=3)
pl<-qplot(cutAge,CompressiveStrength,data=training,fill=cutAge,geom=c('boxplot'))
library("Hmisc", lib.loc="~/R/win-library/3.1")
y<-mixtures$CompressiveStrength
cutAge<-cut2(mixtures$Age,g=3)
cutStr<-cut2(mixtures$CompressiveStrength,g=3)
pl<-qplot(cutAge,CompressiveStrength,data=training,fill=cutAge,geom=c('boxplot'))
pl
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
pl
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$CompressiveStrength)
head(mixtures,2)
head(concrete,2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing
head(training,2)
library("caret", lib.loc="~/R/win-library/3.1")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training)
preProc<-preProcess(log10(diagnosis[,-58]+1),method='pca',pcaComp=2)
abs(cor(training,-58))
abs(cor(training[,-58]))
abs(cor(training[,-58]))
training[,-58]
training[,2]
training[,1]
training[,-58]
head(predictors,1)
summary(adData)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(gridExtra)
library(Hmisc)
names(training)
summary(training)
age <- cut2(training$Age,g=10)
flyash <- cut2(training$FlyAsh,g=10)
byAge <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=age)
byFlyAsh <- qplot(seq(1,nrow(training)),CompressiveStrength,data=training,col=flyash)
grid.arrange(byAge,byFlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
range(training$Superplasticizer)
table(training$Superplasticizer==0)
qplot(Superplasticizer,data=training)
qplot(log(Superplasticizer+1),data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(ggplot2)
library(caret)
ncol(training)
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
training$diagnosis = as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation[,1:7]
qplot(1:length(p$sdev),p$sdev / sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .9)
(cumsum(p$sdev) / sum(p$sdev))[8]
#Result here
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
preProc
preProc
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
install.packages("e1071")
library("e1071", lib.loc="~/R/win-library/3.1")
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("rattle")
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
head(olive,2)
head(newData,2)
head(newdata,2)
library(caret)
modFit<-train(Species~.,method='rpart',data=training)
modFit<-train(olive~.,method='rpart',data=training)
head(olive,2)
library(caret)
modFit<-train(olive~.,method='rpart',data=training)
inTrain<- createDataPartition(y=olive$Area,p=0.7,list=FALSE)
training<- olive[inTrain,]
testing<-olive[-inTrain,]
inTrain<- createDataPartition(y=olive$Area,p=0.7,list=FALSE)
training<- olive[inTrain,]
testing<-olive[-inTrain,]
modFit<-train(olive~.method='rpart',data=training)
modFit<-train(olive~.method='rpart',data=training)
modFit<-train(olive~.,method='rpart',data=training)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
fit <- train(Area~.,data=olive,method="rpart")
pred <- predict(fit,newdata)
fancyRpartPlot(fit$finalModel)
install.packages("rpart.plot")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
fit <- train(Area~.,data=olive,method="rpart")
pred <- predict(fit,newdata)
fancyRpartPlot(fit$finalModel)
head(SAheart,2)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(1234)
fit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
library("rattle", lib.loc="~/R/win-library/3.1")
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
install.packages("randomForest")
library(randomForest)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
setwd("C:/Users/alanpoon/Desktop/coursera/Practical Machine Learning 8/machineLearningGit")
if (!"trainingData.csv" %in% dir("../courseProjectData")  ) {
print("trainingData.csv is there")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "../courseProjectData/trainingData.csv")
}
}
if (!"trainingData" %in% ls()) {
trainingData <- read.csv("../courseProjectData/trainingData.csv", sep = ",")
}
if (!"testData.csv" %in% dir("../courseProjectData")  ) {
print("testData.csv is there")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "../courseProjectData/testData.csv")
}
}
if (!"testData" %in% ls()) {
testData <- read.csv("../courseProjectData/testData.csv", sep = ",")
}
testData[is.na(testData)]<-0
trainingData[is.na(trainingData)]<-0
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe ~ .,method='rpart',data=trainingData[1:20,])
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe ~ .,method='rpart',data=trainingData[1:20,])
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe ~ .,method='rpart',data=trainingData[1:20,])
formula
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe ~ .,method='rpart',data=trainingData[1:20,])
testData[is.na(testData)]<-0
trainingData[is.na(trainingData)]<-0
trainingData<-trainingData[1:70,]
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe ~ .,method='rpart',data=trainingData)
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe ~ .,data=trainingData,method='rpart')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
library(rpart)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe~.,data=trainingData,method='rpart')
m
head(trainingData,1)
head(training)
head(training,1)
modfit<-train(classe~.,data=trainingData,method='rpart')
library(caret)
library(rattle)
library(rpart)
set.seed(125)
modfit<-train(classe~.,data=trainingData,method="rpart")
